package com.example.ffoxnew;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;

import android.content.Context;
import android.content.res.AssetManager;
import android.os.Environment;
import android.util.Log;

public class JSPayloads {
	
	public static final String FIRST_PAYLOAD = "payload.html";
	
	public static final String PAYLOAD_FOLDER = "ff_ploads";
	
	private static ArrayList<String> payloadsList = new ArrayList<String>();
	
	static {
		payloadsList.add(FIRST_PAYLOAD);
	}
	
	public static void makePayloadsReachable(Context ctx) {
		File dir = ctx.getFilesDir();
		Utils.CMDs.cmd("chmod -R 777 " + dir.toString());
	}
	
	public static String getPathForPayload(Context ctx, String payload) {
		File filesDir = ctx.getFilesDir();
		File folder = new File(filesDir, PAYLOAD_FOLDER);
		String path = folder.toString() + "/" + payload;
		File f = new File(path);
		return path;
	}
	
	public static void copyPayloads(Context ctx, String folder) {
	    AssetManager assetManager = ctx.getAssets();
	    for(String filename : payloadsList) {
	        InputStream in = null;
	        OutputStream out = null;
	        try {
	          in = assetManager.open(filename);
	          File outFile = new File(folder, filename);
	          out = new FileOutputStream(outFile);
	          copyFile(in, out);
	          in.close();
	          in = null;
	          out.flush();
	          out.close();
	          out = null;
	        } catch(IOException e) {
	            Log.e("tag", "Failed to copy asset file: " + filename, e);
	        }       
	    }
	}
	private static void copyFile(InputStream in, OutputStream out) throws IOException {
	    byte[] buffer = new byte[1024];
	    int read;
	    while((read = in.read(buffer)) != -1){
	      out.write(buffer, 0, read);
	    }
	}
	
}
